module.constraints

% RAW
EXPORT.raw.radius			= module.ProfileScaling(1,'R');
EXPORT.raw.radiusInverse	= module.ProfileScaling(1,'1/R');
EXPORT.raw.mass				= module.ProfileScaling(1,'M');
EXPORT.raw.massDiff			= module.ProfileScaling(1,'M/R');
EXPORT.raw.velocity			= module.ProfileScaling(1,'c');
EXPORT.raw.acceleration		= module.ProfileScaling(1,'c^2/R');


% SI
EXPORT.SI.radius = module.ProfileScaling(...
	@(obj) obj.data.R,...
	'\mathrm{m}' ...
);

EXPORT.SI.mass = module.ProfileScaling(...
	@(obj) obj.data.M,...
	'\mathrm{kg}'...
);

EXPORT.SI.velocity = module.ProfileScaling(...
	c,...
	'\mathrm{m/s}'...
);

EXPORT.SI.acceleration = module.ProfileScaling(...
	@(obj) c^2/obj.data.R,...
	'\mathrm{m/s^2}'...
);


% ASTRO
EXPORT.astro.radius = module.ProfileScaling(...
	@(obj) EXPORT.SI.radius.map(obj)/parsec,...
	'\mathrm{pc}' ...
);

EXPORT.astro.radius_kpc = module.ProfileScaling(...
	@(obj) EXPORT.SI.radius.map(obj)/kpc,...
	'\mathrm{kpc}' ...
);

EXPORT.astro.velocity = module.ProfileScaling(...
	c/1E3,...
	'\mathrm{km/s}'...
);

EXPORT.astro.mass = module.ProfileScaling(...
	@(obj) obj.data.M/Msun,...
	'M_\odot'...
);

EXPORT.astro.massDiff = module.ProfileScaling(...
	@(obj) obj.data.M/Msun/(obj.data.R/parsec),...
	'M_\odot/\mathrm{pc}'...
);