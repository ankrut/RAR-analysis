% load FD defaults
EXPORT = lib.require(@model.tov.fd.map);

% substitution
fE		= @(obj) obj.data.fermi_energy*exp(-obj.data.potential./2);
			
% define density and pressure 
frho	= @(EF) 1/2/sqrt(pi)*(2*EF.*sqrt(EF.^2 - 1).^3 + EF.*sqrt(EF.^2 - 1) - log(EF + sqrt(EF.^2 - 1)));
fp		= @(EF) 1/2/sqrt(pi)*(2/3*EF.*sqrt(EF.^2 - 1).^3 - EF.*sqrt(EF.^2 - 1) + log(EF + sqrt(EF.^2 - 1)));

EXPORT.density = classes.ProfileMapping(...
	@(obj) frho(fE(obj)),...
	'\rho(r)'...
);

EXPORT.pressure = classes.ProfileMapping(...
	@(obj) fp(fE(obj)),...
	'P(r)'...
);

EXPORT.dnudlnr = classes.ProfileMapping(...
	@(obj) real((obj.data.mass + obj.data.radius.^3.*EXPORT.pressure.map(obj))./(1 - obj.data.mass./obj.data.radius)./obj.data.radius),...
	'd\nu d\ln r'...
);

EXPORT.potentialDiff = classes.ProfileMapping(...
	@(obj) real((obj.data.mass + obj.data.radius.^3.*EXPORT.pressure.map(obj))./(1 - obj.data.mass./obj.data.radius)./obj.data.radius.^2),...
	'\nu''(r)'...
);

EXPORT.velocity = classes.ProfileMapping(...
	@(obj) sqrt(1/2*EXPORT.dnudlnr.map(obj)),...
	'v(r)'...
);

EXPORT.acceleration = classes.ProfileMapping(...
	@(obj) 1/2*EXPORT.dnudlnr.map(obj)./obj.data.radius,...
	'a(r)'...
);

EXPORT.massDiff = classes.ProfileMapping(...
	@(obj) obj.data.radius.^2.*EXPORT.density.map(obj),...
	'M''(r)'...
);