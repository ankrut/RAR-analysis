EXPORT.radius = lib.module.ProfileMapping(...
	@(obj) obj.data.radius,...
	'r' ...
);

EXPORT.mass = lib.module.ProfileMapping(...
	@(obj) obj.data.mass,...
	'M(r)'...
);

EXPORT.potential = lib.module.ProfileMapping(...
	@(obj) obj.data.potential,...
	'\nu(r) - \nu_0'...
);

EXPORT.dnudlnr = lib.module.ProfileMapping(...
	@(obj) (obj.data.mass./obj.data.radius + obj.data.radius.^2.*obj.data.pressure)./(1 - obj.data.mass./obj.data.radius),...
	'{\rm d}\nu/{\rm d}\ln r'...
);

EXPORT.compactness = lib.module.ProfileMapping(...
	@(obj) obj.data.mass./obj.data.radius,...
	'\varphi(r)' ...
);



EXPORT.velocity = lib.module.ProfileMapping(...
	@(obj) sqrt(1/2*EXPORT.dnudlnr.map(obj)),...
	'v(r)'...
);

fw = @(x) sqrt(x./(2 - x));
EXPORT.celerity = lib.module.ProfileMapping(...
	@(obj) real(fw(EXPORT.dnudlnr.map(obj))),...
	'u(r)'...
);


% SECONDARY (prelimary)
EXPORT.density = lib.module.ProfileMapping(...
	@(obj) obj.data.density,...
	'\rho(r)'...
);

EXPORT.pressure = lib.module.ProfileMapping(...
	@(obj) obj.data.pressure,...
	'P(r)'...
);

EXPORT.velocity_dispersion = lib.module.ProfileMapping(...
	@(obj) sqrt(obj.data.pressure./obj.data.density),...
	'\sigma(r)'...
);

% speed of sound
EXPORT.velocitySOS = lib.module.ProfileMapping(...
	@(obj) sqrt(obj.data.pressure.*obj.data.radius.^3./obj.data.mass),...
	'\varsigma(r)'...
);

% centripetal acceleration
EXPORT.acceleration = lib.module.ProfileMapping(...
	@(obj) EXPORT.velocity.map(obj).^2./obj.data.radius,...
	'a(r)'...
);

EXPORT.massDiff = lib.module.ProfileMapping(...
	@(obj) obj.data.radius.^2.*EXPORT.density.map(obj),...
	'M''(r)'...
);