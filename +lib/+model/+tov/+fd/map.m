EXPORT = lib.require(@lib.model.tov.map);

% EXPORT.bindingEnergy = lib.module.ProfileMapping(...
% 	@(obj) -lib.trapz_seq(obj.data.radius,obj.data.radius.^2.*obj.data.density.*(1 - 1./sqrt(1 - obj.data.mass./obj.data.radius))),...
% 	'\delta M(r)' ...
% );

% EXPORT.particleDensity = lib.module.ProfileMapping(...
% 	@(obj) obj.data.particleDensity,...
% 	'n(r)' ...
% );

% EXPORT.particleNumber = lib.module.ProfileMapping(...
% 	@(obj) lib.trapz_seq(obj.data.radius,obj.data.radius.^2.*obj.data.particleDensity.*exp(1/2*obj.data.lambda)),...
% 	'N(r)' ...
% );



% critical density (collapse to black hole)
EXPORT.densityCritical = lib.module.ProfileMapping(...
	@(obj) 3./obj.data.mass.^2,...
	'\rho_{cr}(r)'...
);

EXPORT.density_critical = lib.module.ProfileMapping(...
	@(obj) EXPORT.density.map(obj)./EXPORT.densityCritical.map(obj),...
	'\rho(r)/\rho_{cr}(r)' ...
);

% Roche radius (for rigid bodies)
EXPORT.densityRocheRigid = lib.module.ProfileMapping(...
	@(obj) 6*obj.data.mass./obj.data.radius.^3,...
	'\rho_{RR}(r)'...
);



% % % % root mean square velocity
% % % EXPORT.velocityRMS = lib.module.ProfileMapping(...
% % % 	@(obj) obj.data.velocityRMS,...
% % % 	'\sigma(r)'...
% % % );



% EXPORT.properMass = lib.module.ProfileMapping(...
% 	@(obj) lib.trapz_seq(obj.data.radius,obj.data.radius.^2.*obj.data.density.*exp(1/2*obj.data.lambda)),...
% 	'\hat M(r)' ...
% );


EXPORT.temperature = lib.module.ProfileMapping(...
	@(obj) obj.data.beta0*exp(-1/2*obj.data.potential),...
	'T(r)'...
);

EXPORT.chemicalPotential = lib.module.ProfileMapping(...
	@(obj) (1 + obj.data.beta0*obj.data.theta0)*exp(-1/2*obj.data.potential),...
	'\alpha(r)' ...
);

EXPORT.degeneracy = lib.module.ProfileMapping(...
	@(obj) (EXPORT.chemicalPotential.map(obj) - 1)./EXPORT.temperature.map(obj),...
	'\theta(r)'...
);

EXPORT.potentialDiff = lib.module.ProfileMapping(...
	@(obj) real((obj.data.mass + obj.data.radius.^3.*obj.data.pressure)./(1 - obj.data.mass./obj.data.radius)./obj.data.radius.^2),...
	'\nu''(r)'...
);

EXPORT.temperatureDiff = lib.module.ProfileMapping(...
	@(obj) -1/2*EXPORT.temperature.map(obj)*EXPORT.potentialDiff.map(obj),...
	'T''(r)'...
);

EXPORT.degeneracyDiff = lib.module.ProfileMapping(...
	@(obj) -1/2./EXPORT.temperature.map(obj).*EXPORT.potentialDiff.map(obj),...
	'\theta''(r)'...
);


% EXPORT.tolman = lib.module.ProfileMapping(...
% 	@(obj) obj.data.EOStolman,...
% 	'$\beta(r)/\beta_s \exp(-(\nu(r) - \nu_s)/2)$'...
% );
% 
% EXPORT.klein = lib.module.ProfileMapping(...
% 	@(obj) obj.data.EOSklein,...
% 	'$\alpha(r)/\alpha_s \exp(-(\nu(r) - \nu_s)/2)$'...
% );
% 
% EXPORT.merafina = lib.module.ProfileMapping(...
% 	@(obj) obj.data.EOSmerafina,...
% 	'$\varepsilon(r)/\varepsilon_s \exp(-(\nu(r) - \nu_s)/2)$'...
% );