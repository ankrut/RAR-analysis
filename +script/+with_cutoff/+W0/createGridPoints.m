function createGridPoints
searchCfg = lib.require(@configs.solutionSearchConfig);

% set golden section search options
goOpts				= struct('tau',1E-12,'rtau',1E-8,'MaxIter',50);

% set seed model struct
opts		= struct('xmax', 1E20, 'tau', 1E-16, 'rtau', 1E-4);
param.seed	= struct('beta0', 1E-6, 'theta0', 20);
vm.seed		= struct('param', param.seed, 'options', opts);

TBL.seed.model	= vm.seed;

% find initial point (arbitrary but sufficient high rsorc value = 1E12)
[TBL.init.profile,TBL.init.model] = lib.module.find(...
	'query',	lib.module.ProfileResponse(searchCfg.ResponseList.rsorc,1E12),...
	'model',	lib.struct.setfield(vm.seed,'param/W0', 7.334792065644e+01),...
	'fSolution', {@(vm,list) script.nlinfit.W0('model', vm, 'list', list)} ...
);

% find cored-cuspy transition point
% (minimum surface radius for cored regime)
[TBL.trans.profile,TBL.trans.model] = script.gosect.W0(...
	'model',	vm.seed,...
	'list',		lib.module.ProfileResponse(searchCfg.ResponseList.rsorc,'min'),...
	'interval',	[34,40],...
	'gosect',	{'options',goOpts} ...
);

% find cuspy-deficit transition point (Wp minimum, saddle point criteria)
[TBL.trans2.profile,TBL.trans2.model] = script.gosect.W0(...
	'model',	vm.seed,...
	'list',		lib.module.ProfileResponse(searchCfg.ResponseList.Wp,'min'),...
	'interval',	[34,38],...
	'gosect',	{'options',goOpts} ...
);

% find deficit-disrupt transition point (max rs/rc)
[TBL.trans3.profile,TBL.trans3.model] = script.gosect.W0(...
	'model',	vm.seed,...
	'list',		lib.module.ProfileResponse(@(SOL) 1/searchCfg.ResponseList.rsorc(SOL),'min'),...
	'interval',	[34,37],...
	'gosect',	{'options',goOpts} ...
);

% fully degenerate core limit (min rs/rc)
TBL.fdg.model	= lib.struct.setfield(vm.seed,'param/W0', 20);
TBL.fdg.profile = lib.model.tov.rar.profile('model', TBL.fdg.model);

lib.save('export/TblGridPointsW0.mat',TBL);