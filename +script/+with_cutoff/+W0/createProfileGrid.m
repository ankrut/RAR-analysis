function createProfileGrid
GridPoints	= load('export/TblGridPointsW0.mat');
searchCfg	= lib.require(@configs.solutionSearchConfig);

TBL.cored	= findCoredSolutions(GridPoints, searchCfg);
TBL.cuspy	= findCuspySolutions(GridPoints, searchCfg);
TBL.deficit = findDeficitSolutions(GridPoints, searchCfg);
TBL.disrupt = findDisruptSolutions(GridPoints, searchCfg);

lib.save('export/TblProfileW0.mat',TBL);


function T = findCoredSolutions(GridPoints,searchCfg)
xa = log10(searchCfg.ResponseList.rsorc(GridPoints.init.profile));
xb = log10(searchCfg.ResponseList.rsorc(GridPoints.trans.profile));

T = script.createGrid(...
	'key',			'rsorc',...
	'grid',			logspace(xa,xb,51),...
	'model',		GridPoints.init.model,...
	'searchCfg',	searchCfg,...
	'fSearch',		@script.with_cutoff.W0.findSolution,...
	'fEstimate',	@script.with_cutoff.W0.estimateModelStruct ...
);


function T = findCuspySolutions(GridPoints,searchCfg)
xa = log10(searchCfg.ResponseList.rsorc(GridPoints.trans2.profile));
xb = log10(searchCfg.ResponseList.rsorc(GridPoints.trans.profile));

T = script.createGrid(...
	'key',			'rsorc',...
	'grid',			logspace(xa,xb,51),...
	'model',		GridPoints.trans2.model,...
	'searchCfg',	searchCfg,...
	'fSearch',		@script.with_cutoff.W0.findSolution ...
).reverse();


function T = findDeficitSolutions(GridPoints,~)
grid	= linspace(GridPoints.trans2.model.param.W0,GridPoints.trans3.model.param.W0,21);
T		= script.with_cutoff.W0.createGrid(GridPoints.seed.model,grid);


function T = findDisruptSolutions(GridPoints,searchCfg)
xa		= log10(searchCfg.ResponseList.rsorc(GridPoints.trans3.profile));
xb		= log10(searchCfg.ResponseList.rsorc(GridPoints.fdg.profile));
grid	= logspace(xb,xa,21);

T1 = script.createGrid(...
	'key',			'rsorc',...
	'grid',			grid(1:10),...
	'model',		GridPoints.fdg.model,...
	'searchCfg',	searchCfg,...
	'fSearch',		@script.with_cutoff.W0.findSolution ...
);

T2 = script.createGrid(...
	'key',			'rsorc',...
	'grid',			grid(11:end),...
	'model',		T1.data{end}.model,...
	'searchCfg',	searchCfg,...
	'fSearch',		@script.with_cutoff.W0.findSolutionDisrupt ...
);

T = lib.module.array().append(T1).append(T2).reverse();
