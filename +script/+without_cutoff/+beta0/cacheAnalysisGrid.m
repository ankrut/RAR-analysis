function cacheAnalysisGrid
P		= load('export/TblWithoutCutoffAnalysisBeta0.mat');

MAP		= lib.require(@model.tov.rar.map);
ANCH	= lib.require(@model.tov.rar.anchor);

% set cache maps
fMap	= @(p) struct(...
	'beta0',	p.data.beta0,...
	'rc',		ANCH.velocity_core.map(p,MAP.radius),...
	'rp',		ANCH.velocity_plateau.map(p,MAP.radius),...
	'rh',		ANCH.velocity_halo.map(p,MAP.radius),...
	'vc',		ANCH.velocity_core.map(p,MAP.velocity),...
	'vp',		ANCH.velocity_plateau.map(p,MAP.velocity),...
	'vh',		ANCH.velocity_halo.map(p,MAP.velocity),...
	'Mc',		ANCH.velocity_core.map(p,MAP.mass),...
	'Mp',		ANCH.velocity_plateau.map(p,MAP.mass),...
	'Mh',		ANCH.velocity_halo.map(p,MAP.mass),...
	'rho0',		ANCH.center.map(p,MAP.density),...
	'rhoc',		ANCH.velocity_core.map(p,MAP.density),...
	'rhop',		ANCH.velocity_plateau.map(p,MAP.density),...
	'rhoh',		ANCH.velocity_halo.map(p,MAP.density),...
	'THETA0',	ANCH.center.map(p,MAP.degeneracy),...
	'THETAc',	ANCH.velocity_core.map(p,MAP.degeneracy),...
	'THETAp',	ANCH.velocity_plateau.map(p,MAP.degeneracy),...
	'THETAh',	ANCH.velocity_halo.map(p,MAP.degeneracy) ...
);

% cache data
T.diluted		= P.diluted.map(fMap);
T.trans			= P.trans.map(fMap);
T.degenerate	= P.degenerate.map(fMap);

% save
lib.save('export/CacheWithoutCutoffAnalysisBeta0.mat',T);